<!DOCTYPE html>
<html lang="en">
<link rel="icon" href="images/icon.ico" type="image/x-icon">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>BTC Wallet
  
  </title>
  <style>
    :root {
      --bg: #0b0f14;
      --bg-soft: #0f141a;
      --card: #121923;
      --border: #1e2835;
      --text: #e7eef8;
      --muted: #9fb0c3;
      --accent: #4cc38a; /* minty */
      --accent-2: #7cc4ff; /* soft blue */
      --accent-gold-1: #ffd700; /* gold */
      --accent-gold-2: #b59410; /* dark gold */
      --danger: #ff6b6b;
      --warning: #ffb020;
      --shadow: 0 15px 40px rgba(0,0,0,.35);
      --radius: 18px;
    }

    @media (prefers-color-scheme: light) {
      :root {
        --bg: #f7fbff;
        --bg-soft: #f0f6ff;
        --card: #ffffff;
        --border: #e5eef9;
        --text: #0b0f14;
        --muted: #4b5b6b;
        --shadow: 0 10px 30px rgba(20,30,50,.08);
      }
    }

    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0;
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      background: radial-gradient(1200px 800px at 80% -100px, rgba(124,196,255,.12), transparent),
                  radial-gradient(1000px 700px at -20% 0, rgba(76,195,138,.10), transparent),
                  var(--bg);
      color: var(--text);
      line-height: 1.45;
      letter-spacing: 0.2px;
    }

    .wrap {
      max-width: 1100px;
      margin: 32px auto 80px;
      padding: 0 20px;
    }

    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
      margin-bottom: 22px;
    }

    .brand {
      display: flex; align-items: center; gap: 12px;
    }

    @property --angle {
      syntax: '<angle>';
      inherits: false;
      initial-value: 135deg;
    }

    .logo {
      width: 42px; height: 42px; border-radius: 12px; background: linear-gradient(var(--angle), var(--accent-gold-1), var(--accent-gold-2)); box-shadow: var(--shadow); display: grid; place-items: center;
      animation: rotate-gradient 3s linear infinite;
    }

    @keyframes rotate-gradient {
      to {
        --angle: 495deg; 
      }
    }

    .logo svg { filter: drop-shadow(0 2px 6px rgba(0,0,0,.25)); }
    .title { font-weight: 800; font-size: clamp(18px, 2.6vw, 24px); letter-spacing: 0.5px; }
    .subtitle { color: var(--muted); font-size: 12px; }

    .actions { display: flex; gap: 10px; align-items: center; }
  .actions { position: relative; }
    button, .btn {
      appearance: none; border: 1px solid var(--border); background: linear-gradient(180deg, var(--card), var(--bg-soft)); color: var(--text);
      padding: 10px 14px; border-radius: 12px; cursor: pointer; box-shadow: var(--shadow); font-weight: 600;
      transition: transform 0.08s ease, box-shadow .2s ease, border-color .2s ease, background .2s ease; will-change: transform;
    }
    button:hover { transform: translateY(-1px); }
    button:active { transform: translateY(0); }
    .btn-primary { background: linear-gradient(180deg, rgba(76,195,138,.18), rgba(124,196,255,.14)); border-color: rgba(124,196,255,.35); }
    .btn-danger { background: linear-gradient(180deg, rgba(255,107,107,.18), rgba(255,176,32,.12)); border-color: rgba(255,107,107,.35); }
    .btn-reset {
      appearance: none; border: 1px solid var(--border); background: linear-gradient(135deg, rgb(17, 152, 185));
      padding: 10px 14px; border-radius: 12px; cursor: pointer; box-shadow: var(--shadow); font-weight: 800;
      transition: transform .08s ease, box-shadow .2s ease, border-color .2s ease, background .2s ease; will-change: transform;
    } 

    /* debug toggle & panel */
    .icon-btn { width:36px; height:36px; padding:0; display:grid; place-items:center; border-radius:10px;
      background: linear-gradient(180deg, rgba(144, 238, 144, .8), rgba(6, 64, 43, 1));
      padding: 4px 4px; border-radius: 24px; cursor: pointer; box-shadow: var(--shadow); font-weight: 600;
      transition: transform 0.08s ease, box-shadow .2s ease, border-color .2s ease, background .2s ease; will-change: transform;
    }

    .debug-panel {
      position: absolute; right: 0; top: calc(100% + 10px); width: 320px; z-index: 80;
      display: none; padding: 12px; gap: 8px; box-shadow: 0 10px 30px rgba(10,20,30,.35);
      transform-origin: top right; transition: transform .12s ease, opacity .12s ease;
      background: linear-gradient(135deg, rgb(229, 3, 3), rgb(94, 3, 3)) !important;
    }
    .debug-panel.open { display: grid; transform: translateY(0); opacity: 1; }
    .debug-panel h4 { margin: 0 0 6px; font-size: 13px; }
    .debug-row { display:flex; gap:8px; }
    .debug-note { font-size:12px; color:var(--muted); }

    .grid {
      display: grid; grid-template-columns: 1.2fr .8fr; gap: 18px;
    }
    @media (max-width: 900px) {
      .grid { grid-template-columns: 1fr; }
    }

    .card {
      background: linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.00));
      border: 1px solid var(--border); border-radius: var(--radius); padding: 18px; box-shadow: var(--shadow);
    }
    .card h3 { margin: 0 0 8px; font-size: 16px; letter-spacing: .4px; }
    .muted { color: var(--muted); }

    .balance {
      display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 12px;
    }
    .balance .amount { font-size: clamp(28px, 4.6vw, 44px); font-weight: 900; letter-spacing: .5px; }
    .balance .fiat { color: var(--muted); font-weight: 700; }

    .row { display: flex; flex-wrap: wrap; gap: 10px; align-items: center; }

    .address {
      display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 8px; margin-top: 10px;
      background: var(--bg-soft); border: 1px dashed var(--border); padding: 10px 12px; border-radius: 12px;
      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
    }
    .address code { user-select: all; overflow-wrap: anywhere; }

    .list { display: grid; gap: 10px; max-height: 560px; overflow: auto; padding-right: 4px; }
    .tx {
      display: grid; grid-template-columns: auto 1fr auto; gap: 12px; align-items: center;
      background: var(--bg-soft); border: 1px solid var(--border); border-radius: 14px; padding: 12px;
    }
    .tx .pill { padding: 4px 8px; border-radius: 999px; font-size: 12px; font-weight: 700; letter-spacing: .3px; }
    .tx .pill.in { background: rgba(76,195,138,.15); border: 1px solid rgba(76,195,138,.4); }
    .tx .pill.out { background: rgba(255,107,107,.15); border: 1px solid rgba(255,107,107,.4); }

    .tx .who { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; color: var(--muted); overflow-wrap: anywhere; }
    .tx .amt { font-weight: 800; }

    .divider { height: 1px; background: var(--border); margin: 14px 0; }

    .inputs { display: grid; gap: 10px; }
    label { font-weight: 700; font-size: 12px; color: var(--muted); }
    input, textarea, select {
      width: 100%; background: var(--bg-soft); border: 1px solid var(--border); color: var(--text); border-radius: 12px; padding: 10px 12px;
      font: inherit; outline: none; transition: border-color .2s ease, box-shadow .2s ease;
    }
    input:focus, textarea:focus { border-color: var(--accent-2); box-shadow: 0 0 0 3px rgba(124,196,255,.18); }

    .toast {
      position: fixed; left: 50%; transform: translateX(-50%);
      bottom: 24px; background: var(--card); border: 1px solid var(--border); padding: 10px 14px; border-radius: 12px; box-shadow: var(--shadow);
      display: none; font-weight: 700;
    }

    .footer { margin-top: 18px; color: var(--muted); font-size: 12px; text-align: center; }
    .footer b { color: var(--text); }

    .mini { font-size: 12px; color: var(--muted); }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="brand">
        <div class="logo" aria-hidden="true">
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Logo">
            <circle cx="12" cy="12" r="10" stroke="white" stroke-width="1.5" opacity=".8"/>
            <path d="M9 8h4.3a2.2 2.2 0 010 4.4H9h5a2.6 2.6 0 010 5.2H9" stroke="white" stroke-width="1.7" stroke-linecap="round"/>
          </svg>
        </div>
        <div>
          <div class="title">BTC Wallet</div>
          <div class="subtitle"></div>
        </div>
      </div>
      <div class="actions">
        <button class="btn" id="btn-receive">Receive</button>
        <button class="btn" id="btn-send">Send</button>
        <button class="btn-primary" id="btn-newaddr">New Address</button>
        <button class="btn icon-btn" id="btn-debug-toggle" aria-expanded="false" title="Developer tools" style="margin-left:6px;">
          <!-- gear icon -->
        <div class="gear-icon">
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
          <i class="fa fa-gear"></i>
        </div>
        </button>
        <div class="debug-panel card" id="debug-panel" role="dialog" aria-hidden="true">
          <h4>Developer tools</h4>
          <div class="debug-note">Hidden by default â€” contains local-only helpers.</div>
          <div class="debug-row" style="margin-top:8px; flex-direction:column; align-items:stretch;">
            <label for="debug-custom-amt">Add custom BTC</label>
            <div style="display:flex; gap:6px;">
              <input id="debug-custom-amt" type="number" min="0" step="0.00000001" placeholder="e.g. 0.12345678" />
              <button class="btn" id="btn-add-custom">Add</button>
            </div>
            <button class="btn" id="btn-add-demo">Add 0.01 BTC</button>
            <button class="btn" id="btn-add-many-demo">Add 100 BTC</button>
            <button class="btn-reset" id="btn-reset">Reset</button>
          </div>
        </div>
      </div>
    </header>

    <div class="grid">
      <section class="card" aria-labelledby="balance-h">
        <h3 id="balance-h">Balance</h3>
        <div class="balance">
          <div>
            <div class="amount" id="balance-btc">0.00000000 BTC</div>
            <div class="fiat" id="balance-usd">â‰ˆ $0.00 USD <span class="mini" id="rate-note">(rate: $110,000/BTC)</span></div>
          </div>
          <div class="row">
            <!-- debug controls moved to the Developer tools menu (gear icon) -->
          </div>
        </div>

        <div class="divider"></div>

        <div>
          <div class="muted">Current receiving address</div>
          <div class="address">
            <code id="addr">bc1qz44ttsd4jfgh7l8xhvmcuhhy0g24awqqn3r7a6</code>
            <button class="btn" id="btn-copy">Copy</button>
          </div>
          <div class="mini" style="margin-top:6px;">Address formatâ€‘style only. Generating a new one randomizes the string.</div>
        </div>
      </section>

      <section class="card" aria-labelledby="quick-h">
        <h3 id="quick-h">Quick Actions</h3>
        <div class="inputs">
          <div>
            <label for="qa-to">Send To (address)</label>
            <input id="qa-to" placeholder="bc1q... (anything)" />
          </div>
          <div class="row">
            <div style="flex:1;">
              <label for="qa-amt">Amount (BTC)</label>
              <input id="qa-amt" type="number" min="0" step="0.00000001" placeholder="0.001" />
            </div>
            <div style="flex:1;">
              <label for="qa-note">Note (optional)</label>
              <input id="qa-note" placeholder="Coffee" />
            </div>
          </div>
          <div class="row">
            <button class="btn" id="qa-send">Send</button>
            <div class="mini" id="fee-preview">Network fee: 0.00000000 BTC</div>
          </div>
        </div>
      </section>

      <section class="card" style="grid-column: 1 / -1;" aria-labelledby="tx-h">
        <h3 id="tx-h">Transactions</h3>
        <div class="list" id="tx-list" aria-live="polite"></div>
      </section>
    </div>

    <div class="footer"></div>
  </div>

  <div class="toast" id="toast" role="status" aria-live="polite"></div>

  <script>
    // --- Wallet state (local only) -----------------------------------------
    const STORE_KEY = 'btc_wallet_v1';
    
    async function fetchBtcUsdRaw() {
      const url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd';
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      const price = data?.bitcoin?.usd;
      if (typeof price !== 'number') throw new Error('Unexpected response format');
      return price;
    }
    
    const DEFAULT_STATE = async () => {
      let rate = 112674; // fallback if fetch fails
      try {
        rate = await fetchBtcUsdRaw();
      } catch (e) {
        console.warn('BTC rate fetch failed, using fallback', e);
      }
    
      return {
        balance: 0,
        rateUSD: rate,
        currentAddress: makeBech32Like(),
        txs: [] // {id, kind:'in'|'out', amount, fee, from, to, note, ts}
      };
    };


    // --- Utilities ------------------------------------------------------------
    function save() { localStorage.setItem(STORE_KEY, JSON.stringify(state)); }
    function load() {
      try {
        const j = localStorage.getItem(STORE_KEY);
        return j ? JSON.parse(j) : DEFAULT_STATE();
      } catch { return DEFAULT_STATE(); }
    }

    function formatBTC(v) { return (Number(v) || 0).toFixed(8); }
    function formatUSD(v) {
      return new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' }).format(v);
    }
    function nowISO(ts = Date.now()) { return new Date(ts).toISOString(); }

  // Not real bech32, just looks the part (lowercase, digits, lengthy)
    function makeBech32Like() {
      const alphabet = '023456789acdefghjklmnpqrstuvwxyz'; // no 1/o/i confusion
      let body = '';
      const len = Math.floor(38 + Math.random() * 4);
      for (let i = 0; i < len; i++) body += alphabet[Math.floor(Math.random() * alphabet.length)];
      return 'bc1q' + body;
    }

  function toast(msg) {
      const el = document.getElementById('toast');
      el.textContent = msg; el.style.display = 'block';
      clearTimeout(toast._t);
      toast._t = setTimeout(() => { el.style.display = 'none'; }, 1800);
    }

    function pushTx(tx) {
      state.txs.unshift(tx);
      save();
      renderTxs();
    }

    function calcFee(amount) {
      const amt = Number(amount) || 0;
  // approximate: 0.1% with a floor
      const pct = amt * 0.001;
      return Math.max(0.000005, Math.min(pct, 0.01));
    }

    // --- Seed random transactions on first load ---------------------------
    function seedRandomTxsIfEmpty() {
      if (state.txs && state.txs.length) return; // already seeded or user has data

      const notes = ['Coffee', 'Groceries', 'Salary', 'Rent', 'Gift', 'Refund', 'Tip', 'Invoice'];
      const n = 6 + Math.floor(Math.random() * 6); // 6-11 txs
      let outCount = Math.floor(Math.random() * (n - 1)); // ensure at least 1 in
      if (outCount < 0) outCount = 0;
      const inCount = n - outCount || 1;

      // generate random out amounts (spent)
      const outs = [];
      for (let i = 0; i < outCount; i++) {
        // random small spend between 0.00005 and 0.05
        const amt = +(0.00005 + Math.random() * 0.04995).toFixed(8);
        const fee = calcFee(amt);
        outs.push({ amount: amt, fee });
      }
      const outsTotal = outs.reduce((s, o) => s + o.amount, 0);
      const feesTotal = outs.reduce((s, o) => s + o.fee, 0);

      // ins total needed so that final balance equals the current default balance
      // finalBalance = insTotal - outsTotal - feesTotal  => insTotal = finalBalance + outsTotal + feesTotal
      const finalBalance = Number(state.balance) || 0;
      const insTotal = finalBalance + outsTotal + feesTotal;

      // split insTotal across inCount random shares
      const ins = [];
      if (inCount > 0) {
        // create random weights
        const weights = Array.from({ length: inCount }, () => Math.random());
        const wsum = weights.reduce((s, w) => s + w, 0) || inCount;
        for (let i = 0; i < inCount; i++) {
          const amt = +(insTotal * (weights[i] / wsum)).toFixed(8);
          ins.push({ amount: amt });
        }
        // adjust tiny rounding delta
        const insSum = ins.reduce((s, x) => s + x.amount, 0);
        const delta = +(insTotal - insSum).toFixed(8);
        if (Math.abs(delta) >= 0.00000001) {
          ins[0].amount = +(ins[0].amount + delta).toFixed(8);
        }
      }

      // build tx objects with timestamps spread across the last 30 days
      const txs = [];
      const now = Date.now();
      function makeTS(index, total) {
        const span = 30 * 24 * 60 * 60 * 1000; // 30 days
        return now - Math.floor((index / total) * span) - Math.floor(Math.random() * 8 * 60 * 60 * 1000);
      }

      // create in txs
      for (let i = 0; i < ins.length; i++) {
        txs.push({
          id: crypto.randomUUID(),
          kind: 'in',
          from: makeBech32Like(),
          amount: Number(ins[i].amount),
          fee: 0,
          note: notes[Math.floor(Math.random() * notes.length)],
          ts: makeTS(i, n)
        });
      }

      // create out txs
      for (let i = 0; i < outs.length; i++) {
        txs.push({
          id: crypto.randomUUID(),
          kind: 'out',
          to: makeBech32Like(),
          amount: Number(outs[i].amount),
          fee: Number(outs[i].fee),
          note: notes[Math.floor(Math.random() * notes.length)],
          ts: makeTS(i + ins.length, n)
        });
      }

      // sort newest first and persist
      txs.sort((a, b) => b.ts - a.ts);
      state.txs = txs;
      // balance already equals finalBalance by construction
      save();
    }

    // --- Render ---------------------------------------------------------------
    function renderAll() {
      renderBalance();
      renderAddress();
      renderTxs();
      renderFeePreview();
    }

    function renderBalance() {
      const btc = document.getElementById('balance-btc');
      const usd = document.getElementById('balance-usd');
      btc.textContent = `${formatBTC(state.balance)} BTC`;
      usd.textContent = `â‰ˆ ${formatUSD(state.balance * state.rateUSD)} USD`;
  document.getElementById('rate-note').textContent = `(rate: $${state.rateUSD.toLocaleString()}/BTC)`;
    }

    function renderAddress() {
      document.getElementById('addr').textContent = state.currentAddress;
    }

    function renderTxs() {
      const list = document.getElementById('tx-list');
      list.innerHTML = '';
      if (!state.txs.length) {
        const empty = document.createElement('div');
        empty.className = 'muted';
  empty.textContent = 'No transactions yet. Use Receive or Send to create transactions.';
        list.appendChild(empty);
        return;
      }
      state.txs.forEach(tx => {
        const row = document.createElement('div');
        row.className = 'tx';
        const pill = document.createElement('div');
        pill.className = 'pill ' + (tx.kind === 'in' ? 'in' : 'out');
        pill.textContent = tx.kind === 'in' ? 'RECEIVE' : 'SEND';

        const who = document.createElement('div');
        who.className = 'who';
        who.innerHTML = tx.kind === 'in'
          ? `from <b>${escapeHTML(tx.from || '???')}</b>`
          : `to <b>${escapeHTML(tx.to || '???')}</b>`;
        const meta = document.createElement('div');
        meta.className = 'mini';
        meta.textContent = new Date(tx.ts).toLocaleString();
        who.appendChild(document.createElement('br'));
        who.appendChild(meta);

        const amt = document.createElement('div');
        amt.className = 'amt';
        const total = tx.kind === 'out' ? (tx.amount + tx.fee) : tx.amount;
        amt.innerHTML = `${tx.kind === 'out' ? 'âˆ’' : '+'}${formatBTC(total)} BTC` +
                        `<div class="mini">${formatUSD(total * state.rateUSD)}${tx.fee ? ` â€¢ fee ${formatBTC(tx.fee)}` : ''}</div>`;

        row.appendChild(pill);
        row.appendChild(who);
        row.appendChild(amt);
        if (tx.note) {
          const n = document.createElement('div');
          n.className = 'mini';
          n.style.gridColumn = '2 / -1';
          n.textContent = `Note: ${tx.note}`;
          row.appendChild(n);
        }
        list.appendChild(row);
      });
    }

    function renderFeePreview() {
      const amt = Number(document.getElementById('qa-amt').value);
      const fee = calcFee(amt);
  document.getElementById('fee-preview').textContent = `Network fee: ${formatBTC(fee)} BTC`;
    }

    function escapeHTML(s='') {
      return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]));
    }

    // --- Actions --------------------------------------------------------------
    function doSend(to, amount, note) {
      const amt = Number(amount);
  if (!to || !amt || amt <= 0) return toast('Enter a valid address and amount');
      const fee = calcFee(amt);
      const spend = amt + fee;
  if (spend > state.balance + 1e-12) return toast('Insufficient funds');
      state.balance -= spend;
      pushTx({ id: crypto.randomUUID(), kind: 'out', to, amount: amt, fee, note, ts: Date.now() });
      renderBalance(); save();
  toast('Send complete');
      document.getElementById('qa-to').value = '';
      document.getElementById('qa-amt').value = '';
      document.getElementById('qa-note').value = '';
      renderFeePreview();
    }

    function doReceive(from, amount, note) {
      const amt = Number(amount);
  if (!amt || amt <= 0) return toast('Enter a valid amount');
      state.balance += amt;
      pushTx({ id: crypto.randomUUID(), kind: 'in', from: from || 'friend', amount: amt, fee: 0, note, ts: Date.now() });
      renderBalance(); save();
  toast('Receive added');
    }

    // --- Event wiring ---------------------------------------------------------
    document.getElementById('btn-newaddr').addEventListener('click', () => {
      state.currentAddress = makeBech32Like(); save(); renderAddress(); toast('New address');
    });
    document.getElementById('btn-receive').addEventListener('click', () => {
      const from = prompt('From (name or address)');
      if (from === null) return; // canceled
      const amount = prompt('Amount to receive (BTC)');
      if (amount === null) return;
      const note = prompt('Note (optional)') || '';
      doReceive(from, amount, note);
    });
    document.getElementById('btn-send').addEventListener('click', () => {
      const to = prompt('Send to (address)');
      if (to === null) return;
      const amount = prompt('Amount to send (BTC)');
      if (amount === null) return;
      const note = prompt('Note (optional)') || '';
      doSend(to, amount, note);
    });

    document.getElementById('btn-copy').addEventListener('click', async () => {
      await navigator.clipboard.writeText(state.currentAddress);
      toast('Address copied');
    });

    document.getElementById('btn-reset').addEventListener('click', () => {
      if (!confirm('Reset wallet? This clears localStorage.')) return;
      localStorage.removeItem(STORE_KEY);
      Object.assign(state, DEFAULT_STATE());
      setTimeout(function() {
        location.reload()
      }, 500);
      save(); renderAll(); toast('Reset complete');
    });

    document.getElementById('btn-add-demo').addEventListener('click', () => {
      doReceive('faucet', 0.01, 'Topâ€‘up');
    });

    document.getElementById('btn-add-many-demo').addEventListener('click', () => {
      doReceive('faucet', 10.00, 'Top-up');
    });

    document.getElementById('btn-add-custom').addEventListener('click', () => {
      const amt = parseFloat(document.getElementById('debug-custom-amt').value);
      if (!amt || amt <= 0) return toast('Enter a valid BTC amount');
      doReceive('faucet', amt, 'Custom top-up');
      document.getElementById('debug-custom-amt').value = '';
    });

    // Debug panel toggle -------------------------------------------------
    (function(){
      const toggle = document.getElementById('btn-debug-toggle');
      const panel = document.getElementById('debug-panel');
      if (!toggle || !panel) return;
      toggle.addEventListener('click', (e) => {
        const open = panel.classList.toggle('open');
        toggle.setAttribute('aria-expanded', open ? 'true' : 'false');
        panel.setAttribute('aria-hidden', open ? 'false' : 'true');
      });
      // close when clicking outside
      document.addEventListener('click', (e) => {
        if (!panel.classList.contains('open')) return;
        if (panel.contains(e.target) || toggle.contains(e.target)) return;
        panel.classList.remove('open');
        toggle.setAttribute('aria-expanded', 'false');
        panel.setAttribute('aria-hidden', 'true');
      });
      // close on Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && panel.classList.contains('open')) {
          panel.classList.remove('open');
          toggle.setAttribute('aria-expanded', 'false');
          panel.setAttribute('aria-hidden', 'true');
        }
      });
    })();

    document.getElementById('qa-send').addEventListener('click', () => {
      const to = document.getElementById('qa-to').value.trim();
      const amt = document.getElementById('qa-amt').value;
      const note = document.getElementById('qa-note').value.trim();
      doSend(to, amt, note);
    });

    document.getElementById('qa-amt').addEventListener('input', renderFeePreview);

    // Render transactions
    renderTxs();

    // Render address
    renderAddress();

    // First paint
    renderAll();
  </script>
</body>
</html>
